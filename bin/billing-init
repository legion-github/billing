#!/usr/bin/env python

import httplib
import sys

from bc import log
from bc.jsonrpc import http

LOG = log.logger("client", syslog=False)

host = 'localhost:10004'
auth = {'role':'admin','secret':'qwerty'}

try:
	conn = httplib.HTTPConnection(host, timeout = 30)
	conn.connect()
	conn.timeout = 30
	conn.sock.settimeout(conn.timeout)
except Exception as e:
	LOG.exception("Failed to connect to %s: %s.", host, e)
	sys.exit(1)



def process_metrics():
	metrics = [
		{ 'id': 'os_types',                  'formula': 'unit',  'type': 'time',        'aggregate': 1 },
		{ 'id': 'service_monitoring',        'formula': 'unit',  'type': 'time',        'aggregate': 1 },
		{ 'id': 'volume_bytes',              'formula': 'speed', 'type': 'bytes-usage', 'aggregate': 0 },
		{ 'id': 'snapshot_bytes',            'formula': 'speed', 'type': 'bytes-usage', 'aggregate': 0 },
		{ 'id': 'fs_bytes',                  'formula': 'speed', 'type': 'bytes-usage', 'aggregate': 0 },
		{ 'id': 'fs_get',                    'formula': 'unit',  'type': 'count',       'aggregate': 1 },
		{ 'id': 'fs_put',                    'formula': 'unit',  'type': 'count',       'aggregate': 1 },
		{ 'id': 'ipaddr_reserve',            'formula': 'time',  'type': 'time-usage',  'aggregate': 0 },
		{ 'id': 'ipaddr_use',                'formula': 'time',  'type': 'time-usage',  'aggregate': 0 },
		{ 'id': 'traffic_region_incoming',   'formula': 'unit',  'type': 'bytes',       'aggregate': 1 },
		{ 'id': 'traffic_region_outgoing',   'formula': 'unit',  'type': 'bytes',       'aggregate': 1 },
		{ 'id': 'traffic_external_incoming', 'formula': 'unit',  'type': 'bytes',       'aggregate': 1 },
		{ 'id': 'traffic_external_outgoing', 'formula': 'unit',  'type': 'bytes',       'aggregate': 1 },
	]
	for o in metrics:
		print '->', o
		r = http.jsonrpc_http_request(conn, "metricAdd", o, auth_data=auth)
		print '<-', r


def process_customers():
	customers = [
		{
			'login':          'google.com',
			'name_short':     'Google',
			'name_full':      'Google OOO (Moscow)',
			'comment':        'Important client',
#			'tariff_id':      '',
			'contact_person': 'Ted Person',
			'contact_email':  'ted.person@gmail.com',
#			'contact_phone':  '',
			'wallet':         1234567890,
			'wallet_mode':    'limit',
		},
		{
			'login':          'testy.org',
			'name_short':     'Test',
			'name_full':      'Test Inc.',
			'comment':        'Simple client',
		}
	]
	for o in customers:
		print '->', o
		r = http.jsonrpc_http_request(conn, "customerAdd", o, auth_data=auth)
		print '<-', r


def process_tariffs():
	internal = {
		'id': '*',
		'name': 'Service tariff',
		'description': 'This is service tariff record is not for ordinary customers'
	}
	print '->', internal
	r = http.jsonrpc_http_request(conn, "tariffAddInternal", internal, auth_data=auth)
	print '<-', r

	tariffs = [
		{
			'name': 'Simple testing',
			'description': 'This is try-buy tariff for new customers'
		},
		{
			'name': 'Big rich man',
			'description': 'This tariff for big customers'
		},
		{
			'name': 'Hungry student',
			'description': 'This tariff for startups and little companies'
		}
	]
	for o in tariffs:
		print '->', o
		r = http.jsonrpc_http_request(conn, "tariffAdd", o, auth_data=auth)
		print '<-', r


try:
	process_metrics()
	process_customers()
	process_tariffs()

except Exception, e:
	print 'Error:', e
