#!/usr/bin/env python2.6

import sys, signal, time, logging

from c2 import config, core, daemon
from c2 import constants

from bc         import bc_config
from bc         import sockets
from bc.queue   import BC_QUEUES
from bc.private import deck

from billing    import customers

def fetch_task(q_id, uid):
	task = BC_QUEUES[q_id]['get'](BC_QUEUES[q_id]['name'], uid)

	if not task:
		return None

	# Mongo's ObjectId is not JSON serializable
	del task['_id']

	# Validate task
	if not deck.is_valid(task):
		return None

	# Ignore admin accounts
	if task[deck.CUSTOMER] == constants.ADMIN_CUSTOMER_ID or \
	   task[deck.TARIFF]   == constants.ADMIN_TARIFF_ID:
		deck.remove(task, remove = True)
		return None

	return task


def server_connect(addr, conn):
	logging.info("Connected to " + str(addr[0]) + ":" + str(addr[1]))
	# Send to server 'ready' status
	conn.send({'type': 'status', 'value': 'ready'})


def server_disconnect(addr, conn):
	logging.info("Disconnected with " + str(addr[0]) + ":" + str(addr[1]))


def server_message(addr, conn, msg):
	if msg['type'] == 'task':
		tasks = msg['task']
		queue = msg['queue']

		#logging.debug("Get task: " + task[deck.NAME] + ": " + task[deck.UID])

		try:
			summ = {}
			i = 0

			for uid in tasks:
				t = fetch_task(queue, uid)

				if not t:
					logging.info("Stop at {0} task in list".format(i))
					break
				i += 1

				customer, cost = BC_QUEUES[queue]['withdraw'](t)

				if not customer or not cost:
					continue

				if customer not in summ:
					summ[customer] = 0

				summ[customer] += cost

			for customer, cost in summ.iteritems():
				customers.withdraw(customer, cost)

		except Exception as e:
			logging.exception("Failed to process message with %s tasks: %s", len(tasks), e)

		conn.send({'type': 'status', 'value': 'ready'})

### main
process_num = str(sys.argv[1])
bc_config.init("bc")

# Acquire pid and daemonize
pid_fd = daemon.acquire_pid(bc_config.PID_DIR + "/bc-" + process_num + ".pid")

daemon.daemonize()
daemon.write_pid(pid_fd)

# Open log
core.mini_log("c2-bc-" + process_num,
	level = bc_config.BILLING_LOG_LEVEL,
	log_namespace = "")

# Set signal handlers
signal.siginterrupt(signal.SIGINT,  False)
signal.siginterrupt(signal.SIGQUIT, False)
signal.siginterrupt(signal.SIGTERM, False)
signal.siginterrupt(signal.SIGCHLD, False)
signal.siginterrupt(signal.SIGPIPE, False)

while True:
	client = sockets.Client()
	client.set_handlers({
		'on_connect':    server_connect,
		'on_disconnect': server_disconnect,
		'on_recv':       server_message })
	client.run()

	# Reconnect after 3 seconds
	time.sleep(3)
