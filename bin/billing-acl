#!/usr/bin/env python

import os
import sys
import re
import getopt
import getpass
import uuid

sys.path.insert(0, '../lib')

from bc import log
from bc import database

LOG  = log.logger("wapi-acl", syslog=False)
PROG = sys.argv[0].rsplit('/')[-1]

mode   = 'insert'
quiet  = False
dbname = 'billing'
dbuser = 'bc'
dbpass = 'qwerty'

def error(msg):
	print "{0}: Error: {1}".format(PROG, msg)


def fatal(msg):
	error(msg)
	sys.exit(1)


def show_help(arg, errmsg=None):
	if errmsg:
		error(errmsg)
	print """
Usage: {0} [options] list
   or: {0} [options] <insert,update,upsert,delete> [<mapfile>,...]

Options:
   -d, --database=<name>   specify database name;
   -u, --user=<user>       specify database user;
   -p, --password          read database password from stdin;
   -q, --quiet             suppress all normal output;
   -h, --help              show this message.
""".format(PROG)
	sys.exit(0)

def set_quiet(arg):
	global quiet
	quiet = True

def set_dbname(arg):
	global dbname
	dbname = arg

def set_dbuser(arg):
	global dbuser
	dbuser = arg

def set_dbpass(arg):
	global dbpass
	dbpass = getpass.getpass()


def process_rule(method, role, secret, host):
	with database.DBConnect(dbname=dbname, dbuser=dbuser, dbpass=dbpass) as db:
		res = db.find_one("auth",
			{
				'role': role,
				'method':method
			}
		)

		if not res:
			if mode == 'insert' or mode == 'upsert':
				db.insert('auth',
					{
						'id':     str(uuid.uuid4()),
						'method': method,
						'role':   role,
						'secret': secret,
						'host': host,
					}
				)
				return
			fatal('role={0}, method={1} not found in database'.format(role, method))
		else:
			if mode == 'insert':
				fatal('role={0}, method={1} already in database'.format(role, method))

			if mode == 'delete':
				db.delete('auth',
					{
						'method': method,
						'role':   role
					}
				)
				return

			# upsert or update
			db.update('auth',
				{
					'method': method,
					'role':   role
				},
				{
					'secret': secret,
					'host': host
				}
			)


def read_input(fd):
	i = 1
	while True:
		s = fd.readline()
		if not s:
			break
		s = s[:-1].lstrip()

		if not s or s[0] == '#':
			i += 1
			continue

		a = s.split('\t')

		req = 4
		if mode == 'delete':
			req = 2

		if len(a) < req:
			print 'Warning: wrong file fomat in line {0}.'.format(i)
			continue

		if mode != 'delete':
			role, method, secret, host = a[0:req]
			process_rule(method, role, secret, host)
		else:
			role, method = a[0:req]
			process_rule(method, role, None, None)
		i += 1


try:
	opts, args = getopt.gnu_getopt(sys.argv[1:], 'd:u:ph',
	                               [ 'database=', 'user=', 'password', 'help' ])
except getopt.GetoptError, err:
	fatal(str(err))

opt_handlers = {
	'h|help':	show_help,
	'q|quiet':	set_quiet,
	'd|database':	set_dbname,
	'u|user':	set_dbuser,
	'p|password':	set_dbpass,
}

for opt in opts:
	key = opt[0].rsplit('-')[-1]
	for option in opt_handlers.keys():
		if re.match('(' + option + ')', key):
			opt_handlers[option](opt[1])
			break
	pass

if len(args) == 0:
	show_help('', "More arguments required")

mode = args.pop(0)
if mode not in ['list','insert','update','upsert','delete']:
	fatal('{0}: Argument must be insert, update, upsert'.format(mode))

if mode == 'list':
	with database.DBConnect(dbname=dbname, dbuser=dbuser, dbpass=dbpass) as db:
		if not quiet:
			print "#<role>\t<method>\t<secret>\t<host-fnmatch>"
		c = db.query("SELECT method,role,secret,host FROM auth ORDER BY role,method")
		for rule in c:
			print '{0}\t{1}\t{2}\t{3}'.format(rule['role'],rule['method'],rule['secret'], rule['host'])
	sys.exit(0)

if len(args) == 0:
	if not quiet:
		print "# Format: <role>\\t<method>\\t<secret>\\t<host-fnmatch>"
	read_input(sys.stdin)
	sys.exit(0)

for fn in args:
	if not os.access(fn, os.R_OK):
		fatal('{0}: Not readable'.format(fn))

	if not os.path.isfile(fn):
		fatal('{0}: Not regular file'.format(fn))

	read_input(open(fn, 'r'))
