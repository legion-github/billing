#!/usr/bin/python

import os
import sys
import time
import select
import signal
import errno

from bc import log
from bc import daemon
from bc import config

LOG = log.logger('data-server', init=True, type='stderr')

def fork_prog(name, *args):
	global pgrp

	try:
		path = CWD + '/' + name
		argv = list(args)
		argv.insert(0, name)

		if not os.access(path, os.X_OK):
			raise OSError('No such file or directory')

		pipe = os.pipe()
		pid = os.fork()

		if not pid:
			os.setpgid(0, pgrp)
			os.write(pipe[1], '0')
			daemon.close_all_fds()
			os.execv(CWD + '/' + name, argv)

		if not select.select([pipe[0]], [], [], 30)[0]:
			raise Exception("pipe timeout")

		os.read(pipe[0], 2)
		os.close(pipe[0])
		os.close(pipe[1])

		if pgrp == 0:
			pgrp = pid

		return pid

	except Exception, e:
		LOG.exception(e)
		os._exit(1)


def kill_group(signum):
	if pgrp == 0:
		return
	try:
		for i in xrange(3):
			os.killpg(pgrp, signum)
			time.sleep(0.5)
		os.killpg(pgrp, signal.SIGKILL)
	except OSError:
		pass
	LOG.info("Children process group killed")


def init_workers(reset=False):
	global WORKERS

	if reset:
		WORKERS = {}

	if run_pusher and '_pusher' not in WORKERS:
		WORKERS['_pusher'] = {
			'prog':   'bc-data-pusher',
			'args':   [],
			'pid':    0,
			'delay':  0
		}

	if run_withdraw and '_withdraw' not in WORKERS:
		WORKERS['_withdraw'] = {
			'prog':   'bc-data-withdraw',
			'args':   [],
			'pid':    0,
			'delay':  0
		}

	for k,v in data_source.iteritems():
		if k in WORKERS or k.startswith('_'):
			continue

		WORKERS[k] = {
			'prog':   'bc-data-routine',
			'args':   [str(k)],
			'pid':    0,
			'delay':  0
		}

try:
	conf = config.read()

	data_source  = conf['database']['shards']
	run_pusher   = conf['data-server'].get('pusher', False)
	run_withdraw = conf['data-server'].get('withdraw', False)

	CWD = os.path.dirname(sys.argv[0])
	CWD = os.path.abspath(CWD)

	# Acquire pid and daemonize
	pid_fd = daemon.acquire_pid(conf['data-server']['pidfile'])
	daemon.daemonize(skipfd=[pid_fd])
	daemon.write_pid(pid_fd)

	# Reopen logger to syslog
	LOG = log.logger('data-server', init=True, type='syslog')

	# Set clients process group
	pgrp = 0

	# List of incoming singals
	signals = []

	# Set signal handlers
	for sig in [ signal.SIGUSR1, signal.SIGUSR2, signal.SIGTERM ]:
		signal.signal(sig, lambda sig,frame: signals.append(int(sig)))

	# Initialize client list
	init_workers(reset=True)

except Exception as e:
	LOG.exception("Initialization failed: %s", e)
	os._exit(1)


try:
	LOG.info("Server start")

	while True:
		signum = 0

		while len(signals) > 0:
			s = signals.pop(0)

			if s == signum:
				continue
			signum = s

			if signum in [ signal.SIGUSR1, signal.SIGUSR2 ]:
				LOG.info("Reconfiguring server")

				# Reread config file
				conf = config.read(force=True)
				data_source = conf['database']['shards']

				# Reopen logger to syslog
				LOG = log.logger("server", init=True, type='syslog')

			if   signum == signal.SIGUSR1:
				# Run new childrens
				init_workers(reset=False)

			elif signum == signal.SIGUSR2:
				LOG.info("Restarting childrens")

				# Finish old childrens
				kill_group(signal.SIGTERM)

				# Recreate children list
				init_workers(reset=True)

			elif signum == signal.SIGTERM:
				LOG.info("Going down by SIGTERM")

				# Finish all childrens
				kill_group(signal.SIGTERM)

				# Goodby!
				os._exit(0)

		while True:
			try:
				pid = pcount = 0

				for k in sorted(WORKERS.keys()):
					child = WORKERS[k]

					if child['pid'] != pid:
						continue

					child['pid'] = fork_prog(child['prog'], *child['args'])

					if child['delay'] > 0:
						time.sleep(child['delay'])
					pcount += 1

				if pcount > 0:
					LOG.info("Spawned {0} process".format(pcount))

				pid,status = os.waitpid(-1, 0) #os.WNOHANG

				if (pid,status) == (0,0):
					break

			except OSError, e:
				if e.errno != errno.EINTR:
					LOG.error(e)
				break

		time.sleep(1)

except Exception, e:
	LOG.exception(e)

	kill_group(signal.SIGTERM)
	os._exit(1)
