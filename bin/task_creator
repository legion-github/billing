#!/usr/bin/python

import sys
import random
import uuid
import time
import logging
import multiprocessing


from bc import log
from bc import config
from bc_client import Tasks
from bc_client import Customers
from bc_client import Tariffs
from bc_client import Metrics

LOG = log.logger("unittests", type='stderr', level='debug', init=True)

num_customers = int(sys.argv[1])
num_tasks     = int(sys.argv[2])

try:
	conf = config.read()

	WAPIS = {}
	for wapi in conf['zone'].values():
		WAPIS[wapi['server']]=wapi['auth']
		if wapi['local']:
			WAPI_LOCAL = wapi['server']

	tariffIds = []
	for i in Tariffs(WAPIS, WAPI_LOCAL).tariffList():
		if i['id'] != '*':
			tariffIds.append(i['id'])

	creator_uuid = str(uuid.uuid4())[:6]

	customers    = []
	customersIDs = []
	cl_customers = Customers(WAPIS, WAPI_LOCAL)

	for i in xrange(num_customers):
		o = {
			'id':          str(uuid.uuid4()),
			'login':       'testy{0}-{1}.org'.format(i, creator_uuid),
			'name_short':  'Test{0}-{1}'.format(i, creator_uuid),
			'name_full':   'Test{0}-{1} Inc.'.format(i, creator_uuid),
			'comment':     'Simple test client',
			'wallet_mode': 'unlimit',
			'tariff_id':   random.choice(tariffIds)
		}

		cl_customers.customerAdd(o)
		customersIDs.append(o['id'])
		customers.append(o)

	print "Created {0} test customers".format(len(customers))

	metricIds = [ i['id'] for i in Metrics(WAPIS, WAPI_LOCAL).metricList() ]

	def create_tasks(customer):
		cl_tasks = Tasks(WAPIS, WAPI_LOCAL)

		dsum = 0
		stat = {
			'customer':     customer,
			'start_time':   int(time.time()),
			'finish_time':  0,
			'task_maxtime': 0,
			'task_mintime': 0,
			'task_avgtime': 0,
		}

		for i in xrange(num_tasks):
			ts = int(time.time())
			cl_tasks.taskAdd({
				'type':		random.choice(metricIds),
				'customer':	customer,
				'value':	random.randint(1, 100),
				'user':		str(uuid.uuid4()),
				'uuid':		str(uuid.uuid4()),
				'descr':	"task number {0}".format(i),
			})
			te = int(time.time())

			delta = te - ts
			dsum += delta

			if stat['task_maxtime'] < delta or stat['task_maxtime'] == 0:
				stat['task_maxtime'] = delta

			if stat['task_mintime'] > delta or stat['task_mintime'] == 0:
				stat['task_mintime'] = delta

			if not i % 100:
				print "Created {0} for customer {2} tasks from {1}".format(i, num_tasks, customer)

		stat['finish_time']  = int(time.time())
		stat['task_avgtime'] = float(dsum / num_tasks)

		return stat


	logger = multiprocessing.log_to_stderr()
	logger.setLevel(logging.INFO)

	pool   = multiprocessing.Pool(processes=num_procs)
	result = pool.map_async(create_tasks, customersIDs)

	pool.close()
	pool.join()

	print "Task creation finished."
	print

	sum_maxtime = 0
	sum_mintime = 0
	sum_avgtime = 0

	print "[ Per customer statistic ]"

	for stat in result.get():
		print "Customer:     ", stat['customer']
		print "Seconds spent:", stat['finish_time'] - stat['start_time']
		print "Maximum delay:", stat['task_maxtime']
		print "Minimum delay:", stat['task_mintime']
		print "Average delay:", stat['task_avgtime']
		print

		if sum_maxtime < stat['task_maxtime'] or sum_maxtime == 0:
			sum_maxtime = stat['task_maxtime']

		if sum_mintime > stat['task_mintime'] or sum_mintime == 0:
			sum_mintime = stat['task_mintime']

		sum_avgtime += stat['task_avgtime']

	sum_avgtime = float(sum_avgtime / num_customers)

	print "[ Summary ]"
	print "Number of parallel process:  ", num_procs
	print "Number of customers:         ", num_customers
	print "Number of tasks per customer:", num_tasks
	print "Number of all tasks:         ", num_customers * num_tasks
	print "Maximum delay task creation: ", sum_maxtime
	print "Minimum delay task creation: ", sum_mintime
	print "Average delay:               ", sum_avgtime
	print

except Exception, e:
	print 'Error:', e
