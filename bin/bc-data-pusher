#!/usr/bin/python
#
# bc-data-pusher
#
# Copyright (c) 2012-2013 by Alexey Gladkov
# Copyright (c) 2012-2013 by Nikolay Ivanov
#
# This file is covered by the GNU General Public License,
# which should be included with billing as the file COPYING.
#

import os
import sys
import time
import signal

from bc import log
from bc import config
from bc import database

from bc_client import Sync

LOG = log.logger('data-pusher', init=True, type='syslog', level='debug')

try:
	conf = config.read()
	SYNC_TABLES = conf['data-server']['pusher']['tables']
	SYNC_PERIOD = conf['data-server']['pusher']['period']

	# List of incoming singals
	may_work = True

	# Set signal handlers
	def sig_handler(sig,frame):
		may_work = False

	for sig in [ signal.SIGTERM ]:
		signal.signal(sig, sig_handler)

except Exception as e:
	LOG.exception("Initialization failed: %s", e)
	os._exit(1)

CONNECTS = {}

def sync_table(table):
	with database.DBConnect() as db:
		while may_work:
			data = db.find_all(table, { 'sync': 0 }, limit=10)

			if not data:
				break

			rc = 0

			try:
				for name,zone in conf['zones'].iteritems():
					if name not in CONNECTS:
						CONNECTS[name] = Sync(zone['auth'], zone['server'])

					CONNECTS[name].syncList(
						{ 'table': table, 'list': data }
					)
					rc += 1

			except Exception, e:
				LOG.exception(e)
				break

			if len(conf['zones']) != rc:
				continue

			db.update(table,
				{ 'id': map(lambda x: x['id'], data) },
				{ 'sync': 1 }
			)


LOG.info("Configuration synchronizer start")

while may_work:
	try:
		for table in SYNC_TABLES:
			if not may_work:
				break

			sync_table(table)

	except database.DatabaseError, e:
		# See http://www.postgresql.org/docs/9.0/static/errcodes-appendix.html#ERRCODES-TABLE
		if e.pgcode not in [ None, '57000', '57014', '57P01', '57P02', '57P03' ]:
			LOG.exception("Fatal database error: %s", e)
			os._exit(1)

		LOG.error(database.get_strerror(e))

	except Exception, e:
		LOG.exception("Fatal error: %s", e)
		os._exit(1)

	time.sleep(SYNC_PERIOD)
